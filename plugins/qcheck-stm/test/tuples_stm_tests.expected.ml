(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Tuples
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = (char, int) t
                             let init = Some (fun () -> create ())
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: (char * int) list }
    let init =
      Some
        (let () = () in
         {
           contents =
             (try []
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "tuples.mli";
                               pos_lnum = 6;
                               pos_bol = 251;
                               pos_cnum = 276
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "tuples.mli";
                               pos_lnum = 6;
                               pos_bol = 251;
                               pos_cnum = 278
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | Tup2: 'a1 ty * 'a2 ty -> ('a1 * 'a2) ty 
      | Tup3: 'a1 ty * 'a2 ty * 'a3 ty -> ('a1 * 'a2 * 'a3) ty 
    let tup2 spec1 spec2 =
      let (ty1, show1) = spec1
      and (ty2, show2) = spec2 in
      ((Tup2 (ty1, ty2)),
        (Util.Pp.to_show
           (Util.Pp.pp_tuple2 (Util.Pp.of_show show1) (Util.Pp.of_show show2))))
    and tup3 spec1 spec2 spec3 =
      let (ty1, show1) = spec1
      and (ty2, show2) = spec2
      and (ty3, show3) = spec3 in
      ((Tup3 (ty1, ty2, ty3)),
        (Util.Pp.to_show
           (Util.Pp.pp_tuple3 (Util.Pp.of_show show1) (Util.Pp.of_show show2)
              (Util.Pp.of_show show3))))
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Clear 
      | Add of (char * int) 
      | Add' of (bool * char * int) 
      | Add'' of (bool * (char * int)) 
      | Size_tup 
      | Size_tup' 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Clear -> Format.asprintf "%s sut" "clear"
      | Add tup ->
          Format.asprintf "%s sut %a" "add"
            (Util.Pp.pp_tuple2 Util.Pp.pp_char Util.Pp.pp_int true) tup
      | Add' tup_1 ->
          Format.asprintf "%s sut %a" "add'"
            (Util.Pp.pp_tuple3 Util.Pp.pp_bool Util.Pp.pp_char Util.Pp.pp_int
               true) tup_1
      | Add'' tup_2 ->
          Format.asprintf "%s sut %a" "add''"
            (Util.Pp.pp_tuple2 Util.Pp.pp_bool
               (Util.Pp.pp_tuple2 Util.Pp.pp_char Util.Pp.pp_int) true) tup_2
      | Size_tup -> Format.asprintf "%s sut" "size_tup"
      | Size_tup' -> Format.asprintf "%s sut" "size_tup'"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [pure Clear;
               (pure (fun tup -> Add tup)) <*> (tup2 char int);
               (pure (fun tup_1 -> Add' tup_1)) <*> (tup3 bool char int);
               (pure (fun tup_2 -> Add'' tup_2)) <*>
                 (tup2 bool (tup2 char int));
               pure Size_tup;
               pure Size_tup'])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Clear ->
          let tmp__004_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try []
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 11;
                                  pos_bol = 416;
                                  pos_cnum = 441
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 11;
                                  pos_bol = 416;
                                  pos_cnum = 443
                                }
                            })))
            }
      | Add tup ->
          let tmp__005_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match tup with
                   | (a_1, b_1) -> (a_1, b_1) :: tmp__005_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 16;
                                  pos_bol = 594;
                                  pos_cnum = 619
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 16;
                                  pos_bol = 594;
                                  pos_cnum = 666
                                }
                            })))
            }
      | Add' tup_1 ->
          let tmp__006_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match tup_1 with
                   | (c, a_2, b_2) ->
                       if c = true
                       then (a_2, b_2) :: tmp__006_.contents
                       else tmp__006_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 21;
                                  pos_bol = 871;
                                  pos_cnum = 896
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 23;
                                  pos_bol = 965;
                                  pos_cnum = 992
                                }
                            })))
            }
      | Add'' tup_2 ->
          let tmp__007_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match tup_2 with
                   | (c_1, (a_3, b_3)) ->
                       if c_1 = true
                       then (a_3, b_3) :: tmp__007_.contents
                       else tmp__007_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 28;
                                  pos_bol = 1156;
                                  pos_cnum = 1181
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "tuples.mli";
                                  pos_lnum = 30;
                                  pos_bol = 1252;
                                  pos_cnum = 1279
                                }
                            })))
            }
      | Size_tup -> state__003_
      | Size_tup' -> state__003_
    let precond cmd__030_ state__031_ =
      match cmd__030_ with
      | Clear -> true
      | Add tup -> true
      | Add' tup_1 -> true
      | Add'' tup_2 -> true
      | Size_tup -> true
      | Size_tup' -> true
    let postcond _ _ _ = true
    let run cmd__032_ sut__033_ =
      match cmd__032_ with
      | Clear ->
          Res
            (unit,
              (let tmp__034_ = SUT.pop sut__033_ in
               let res__035_ = clear tmp__034_ in
               (SUT.push tmp__034_ sut__033_; res__035_)))
      | Add tup ->
          Res
            (unit,
              (let tmp__036_ = SUT.pop sut__033_ in
               let res__037_ = add tmp__036_ tup in
               (SUT.push tmp__036_ sut__033_; res__037_)))
      | Add' tup_1 ->
          Res
            (unit,
              (let tmp__038_ = SUT.pop sut__033_ in
               let res__039_ = add' tmp__038_ tup_1 in
               (SUT.push tmp__038_ sut__033_; res__039_)))
      | Add'' tup_2 ->
          Res
            (unit,
              (let tmp__040_ = SUT.pop sut__033_ in
               let res__041_ = add'' tmp__040_ tup_2 in
               (SUT.push tmp__040_ sut__033_; res__041_)))
      | Size_tup ->
          Res
            ((tup2 int int),
              (let tmp__042_ = SUT.pop sut__033_ in
               let res__043_ = size_tup tmp__042_ in
               (SUT.push tmp__042_ sut__033_; res__043_)))
      | Size_tup' ->
          Res
            ((tup3 int int int),
              (let tmp__044_ = SUT.pop sut__033_ in
               let res__045_ = size_tup' tmp__044_ in
               (SUT.push tmp__044_ sut__033_; res__045_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__010_ state__011_ res__012_ =
  let open Spec in
    let open STM in
      let new_state__013_ = lazy (next_state cmd__010_ state__011_) in
      match (cmd__010_, res__012_) with
      | (Clear, Res ((Unit, _), _)) -> None
      | (Add tup, Res ((Unit, _), _)) -> None
      | (Add' tup_1, Res ((Unit, _), _)) -> None
      | (Add'' tup_2, Res ((Unit, _), _)) -> None
      | (Size_tup, Res ((Tup2 (Int, Int), _), (x, y))) ->
          Ortac_runtime.append
            (if
               let t_new__019_ =
                 lazy (Model.get (Lazy.force new_state__013_) 0) in
               let t_old__018_ = lazy (Model.get state__011_ 0) in
               try
                 (Ortac_runtime.Gospelstdlib.integer_of_int x) =
                   (Ortac_runtime.Gospelstdlib.List.length
                      (Lazy.force t_new__019_).contents)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 34;
                                pos_bol = 1422;
                                pos_cnum = 1434
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 34;
                                pos_bol = 1422;
                                pos_cnum = 1460
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Tuples" "create ()"
                    (Either.right (Res (Ortac_runtime.dummy, ()))) "size_tup"
                    [("x = List.length t.contents",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 34;
                             pos_bol = 1422;
                             pos_cnum = 1434
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 34;
                             pos_bol = 1422;
                             pos_cnum = 1460
                           }
                       })]))
            (if
               let t_new__021_ =
                 lazy (Model.get (Lazy.force new_state__013_) 0) in
               let t_old__020_ = lazy (Model.get state__011_ 0) in
               try
                 (Ortac_runtime.Gospelstdlib.integer_of_int y) =
                   (Ortac_runtime.Gospelstdlib.List.length
                      (Lazy.force t_new__021_).contents)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 35;
                                pos_bol = 1461;
                                pos_cnum = 1473
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 35;
                                pos_bol = 1461;
                                pos_cnum = 1499
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Tuples" "create ()"
                    (Either.right (Res (Ortac_runtime.dummy, ()))) "size_tup"
                    [("y = List.length t.contents",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 35;
                             pos_bol = 1461;
                             pos_cnum = 1473
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 35;
                             pos_bol = 1461;
                             pos_cnum = 1499
                           }
                       })]))
      | (Size_tup', Res ((Tup3 (Int, Int, Int), _), (x_1, y_1, z))) ->
          Ortac_runtime.append
            (if
               let t_new__024_ =
                 lazy (Model.get (Lazy.force new_state__013_) 0) in
               let t_old__023_ = lazy (Model.get state__011_ 0) in
               try
                 (Ortac_runtime.Gospelstdlib.integer_of_int x_1) =
                   (Ortac_runtime.Gospelstdlib.List.length
                      (Lazy.force t_new__024_).contents)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 39;
                                pos_bol = 1664;
                                pos_cnum = 1676
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 39;
                                pos_bol = 1664;
                                pos_cnum = 1702
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Tuples" "create ()"
                    (Either.right (Res (Ortac_runtime.dummy, ())))
                    "size_tup'"
                    [("x = List.length t.contents",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 39;
                             pos_bol = 1664;
                             pos_cnum = 1676
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 39;
                             pos_bol = 1664;
                             pos_cnum = 1702
                           }
                       })]))
            (Ortac_runtime.append
               (if
                  let t_new__026_ =
                    lazy (Model.get (Lazy.force new_state__013_) 0) in
                  let t_old__025_ = lazy (Model.get state__011_ 0) in
                  try
                    (Ortac_runtime.Gospelstdlib.integer_of_int y_1) =
                      (Ortac_runtime.Gospelstdlib.List.length
                         (Lazy.force t_new__026_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 40;
                                   pos_bol = 1703;
                                   pos_cnum = 1715
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 40;
                                   pos_bol = 1703;
                                   pos_cnum = 1741
                                 }
                             }))
                then None
                else
                  Some
                    (Ortac_runtime.report "Tuples" "create ()"
                       (Either.right (Res (Ortac_runtime.dummy, ())))
                       "size_tup'"
                       [("y = List.length t.contents",
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 40;
                                pos_bol = 1703;
                                pos_cnum = 1715
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 40;
                                pos_bol = 1703;
                                pos_cnum = 1741
                              }
                          })]))
               (if
                  let t_new__028_ =
                    lazy (Model.get (Lazy.force new_state__013_) 0) in
                  let t_old__027_ = lazy (Model.get state__011_ 0) in
                  try
                    (Ortac_runtime.Gospelstdlib.integer_of_int z) =
                      (Ortac_runtime.Gospelstdlib.List.length
                         (Lazy.force t_new__028_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 41;
                                   pos_bol = 1742;
                                   pos_cnum = 1754
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 41;
                                   pos_bol = 1742;
                                   pos_cnum = 1780
                                 }
                             }))
                then None
                else
                  Some
                    (Ortac_runtime.report "Tuples" "create ()"
                       (Either.right (Res (Ortac_runtime.dummy, ())))
                       "size_tup'"
                       [("z = List.length t.contents",
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 41;
                                pos_bol = 1742;
                                pos_cnum = 1754
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 41;
                                pos_bol = 1742;
                                pos_cnum = 1780
                              }
                          })])))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Tuples STM tests" check_init_state
        ortac_postcond])
