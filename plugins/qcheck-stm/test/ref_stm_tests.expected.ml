(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Ref
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = t
                             let init = Some (fun () -> make 42)
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      value: Ortac_runtime.integer }
    let init =
      Some
        (let i_1 = 42 in
         {
           value =
             (try Ortac_runtime.Gospelstdlib.integer_of_int i_1
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "ref.mli";
                               pos_lnum = 6;
                               pos_bol = 211;
                               pos_cnum = 233
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "ref.mli";
                               pos_lnum = 6;
                               pos_bol = 211;
                               pos_cnum = 234
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Get 
    let show_cmd cmd__001_ =
      match cmd__001_ with | Get -> Format.asprintf "%s sut" "get"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd (let open Gen in oneof [pure Get])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with | Get -> state__003_
    let precond cmd__016_ state__017_ = match cmd__016_ with | Get -> true
    let postcond _ _ _ = true
    let run cmd__018_ sut__019_ =
      match cmd__018_ with
      | Get ->
          Res
            (int,
              (let tmp__020_ = SUT.pop sut__019_ in
               let res__021_ = get tmp__020_ in
               (SUT.push tmp__020_ sut__019_; res__021_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__005_ state__006_ res__007_ =
  let open Spec in
    let open STM in
      let new_state__008_ = lazy (next_state cmd__005_ state__006_) in
      match (cmd__005_, res__007_) with
      | (Get, Res ((Int, _), i)) ->
          if
            let r_new__012_ = lazy (Model.get (Lazy.force new_state__008_) 0) in
            let r_old__011_ = lazy (Model.get state__006_ 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int i) =
                 (Lazy.force r_new__012_).value
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "ref.mli";
                              pos_lnum = 11;
                              pos_bol = 346;
                              pos_cnum = 358
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "ref.mli";
                              pos_lnum = 11;
                              pos_bol = 346;
                              pos_cnum = 369
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Ref" "make 42"
                 (Either.right
                    (Res
                       (integer,
                         (let r_new__010_ =
                            lazy (Model.get (Lazy.force new_state__008_) 0) in
                          let r_old__009_ = lazy (Model.get state__006_ 0) in
                          try (Lazy.force r_new__010_).value
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "ref.mli";
                                           pos_lnum = 11;
                                           pos_bol = 346;
                                           pos_cnum = 362
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "ref.mli";
                                           pos_lnum = 11;
                                           pos_bol = 346;
                                           pos_cnum = 369
                                         }
                                     })))))) "get"
                 [("i = r.value",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 346;
                          pos_cnum = 358
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 346;
                          pos_cnum = 369
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Ref STM tests" check_init_state
        ortac_postcond])
