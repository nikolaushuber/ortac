(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Ref
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = t
                             let init = Some (fun () -> make 42)
                           end)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type cmd =
      | Get 
    let show_cmd cmd__001_ =
      match cmd__001_ with | Get -> Format.asprintf "%s sut" "get"
    type nonrec state = {
      value: Ortac_runtime.integer }
    let init_state =
      let i_1 = 42 in
      {
        value =
          (try Ortac_runtime.Gospelstdlib.integer_of_int i_1
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "ref.mli";
                            pos_lnum = 6;
                            pos_bol = 211;
                            pos_cnum = 233
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "ref.mli";
                            pos_lnum = 6;
                            pos_bol = 211;
                            pos_cnum = 234
                          }
                      })))
      }
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd (let open Gen in oneof [pure Get])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with | Get -> state__003_
    let precond cmd__008_ state__009_ = match cmd__008_ with | Get -> true
    let postcond _ _ _ = true
    let run cmd__010_ sut__011_ =
      match cmd__010_ with
      | Get ->
          Res
            (int,
              (let tmp__012_ = SUT.pop sut__011_ in
               let res__013_ = get tmp__012_ in
               (SUT.push tmp__012_ sut__011_; res__013_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__004_ state__005_ res__006_ =
  let open Spec in
    let open STM in
      let new_state__007_ = lazy (next_state cmd__004_ state__005_) in
      match (cmd__004_, res__006_) with
      | (Get, Res ((Int, _), i)) ->
          if
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int i) =
                 (Lazy.force new_state__007_).value
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "ref.mli";
                              pos_lnum = 11;
                              pos_bol = 346;
                              pos_cnum = 358
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "ref.mli";
                              pos_lnum = 11;
                              pos_bol = 346;
                              pos_cnum = 369
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Ref" "make 42"
                 (Either.right
                    (Res
                       (integer,
                         (try (Lazy.force new_state__007_).value
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "ref.mli";
                                           pos_lnum = 11;
                                           pos_bol = 346;
                                           pos_cnum = 362
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "ref.mli";
                                           pos_lnum = 11;
                                           pos_bol = 346;
                                           pos_cnum = 369
                                         }
                                     })))))) "get"
                 [("i = r.value",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 346;
                          pos_cnum = 358
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 346;
                          pos_cnum = 369
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Ref STM tests" check_init_state
        ortac_postcond])
