(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Invariants
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = int t
                             let init = Some (fun () -> create 42)
                           end)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type cmd =
      | Push of int 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Push a_1 ->
          Format.asprintf "%s %a sut" "push" (Util.Pp.pp_int true) a_1
    type nonrec state = {
      contents: int list }
    let init_state =
      let a_2 = 42 in
      {
        contents =
          (try a_2 :: []
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "invariants.mli";
                            pos_lnum = 8;
                            pos_bol = 292;
                            pos_cnum = 317
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "invariants.mli";
                            pos_lnum = 8;
                            pos_bol = 292;
                            pos_cnum = 324
                          }
                      })))
      }
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in oneof [(pure (fun a_1 -> Push a_1)) <*> int])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Push a_1 ->
          {
            contents =
              ((try a_1 :: state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "invariants.mli";
                                 pos_lnum = 13;
                                 pos_bol = 476;
                                 pos_cnum = 501
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "invariants.mli";
                                 pos_lnum = 13;
                                 pos_bol = 476;
                                 pos_cnum = 522
                               }
                           }))))
          }
    let precond cmd__008_ state__009_ =
      match cmd__008_ with | Push a_1 -> true
    let postcond _ _ _ = true
    let run cmd__010_ sut__011_ =
      match cmd__010_ with
      | Push a_1 ->
          Res
            (unit,
              (let tmp__012_ = SUT.pop sut__011_ in
               let res__013_ = push a_1 tmp__012_ in
               (SUT.push tmp__012_ sut__011_; res__013_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () =
  let __state__014_ = Spec.init_state in
  if
    not
      (try
         Ortac_runtime.Gospelstdlib.(>)
           (Ortac_runtime.Gospelstdlib.List.length __state__014_.contents)
           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
       with
       | e ->
           raise
             (Ortac_runtime.Partial_function
                (e,
                  {
                    Ortac_runtime.start =
                      {
                        pos_fname = "invariants.mli";
                        pos_lnum = 4;
                        pos_bol = 110;
                        pos_cnum = 124
                      };
                    Ortac_runtime.stop =
                      {
                        pos_fname = "invariants.mli";
                        pos_lnum = 4;
                        pos_bol = 110;
                        pos_cnum = 150
                      }
                  })))
  then QCheck.Test.fail_report "INIT_SUT violates type invariants for SUT"
let ortac_postcond cmd__004_ state__005_ res__006_ =
  let open Spec in
    let open STM in
      let new_state__007_ = lazy (next_state cmd__004_ state__005_) in
      match (cmd__004_, res__006_) with
      | (Push a_1, Res ((Unit, _), _)) ->
          if
            (try
               Ortac_runtime.Gospelstdlib.(>)
                 (Ortac_runtime.Gospelstdlib.List.length
                    (Lazy.force new_state__007_).contents)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "invariants.mli";
                              pos_lnum = 4;
                              pos_bol = 110;
                              pos_cnum = 124
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "invariants.mli";
                              pos_lnum = 4;
                              pos_bol = 110;
                              pos_cnum = 150
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Invariants" "create 42"
                 (Either.right (Res (unit, ()))) "push"
                 [("List.length x.contents > 0",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "invariants.mli";
                          pos_lnum = 4;
                          pos_bol = 110;
                          pos_cnum = 124
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "invariants.mli";
                          pos_lnum = 4;
                          pos_bol = 110;
                          pos_cnum = 150
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Invariants STM tests"
        check_init_state ortac_postcond])
