(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open Invariants
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = create 42 end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      let a_1 = 42 in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.singleton a_1
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "invariants.mli";
                            pos_lnum = 8;
                            pos_bol = 304;
                            pos_cnum = 329
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "invariants.mli";
                            pos_lnum = 8;
                            pos_bol = 304;
                            pos_cnum = 349
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 2
    type state = Model.t
    let init_state = Model.create 2 ()
    type cmd =
      | Create of int 
      | Push of int 
      | Transfer 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create a_1 ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_int true) a_1
      | Push a_2 ->
          Format.asprintf "%s %a <sut>" "push" (Util.Pp.pp_int true) a_2
      | Transfer -> Format.asprintf "%s <sut> <sut>" "transfer"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun a_1 -> Create a_1)) <*> small_signed_int;
               (pure (fun a_2 -> Push a_2)) <*> int;
               pure Transfer])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Create a_1 ->
          let t_1__005_ =
            let open ModelElt in
              {
                contents =
                  (try Ortac_runtime.Gospelstdlib.Sequence.singleton a_1
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 8;
                                    pos_bol = 304;
                                    pos_cnum = 329
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 8;
                                    pos_bol = 304;
                                    pos_cnum = 349
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 0) t_1__005_
      | Push a_2 ->
          let t_2__006_ = Model.get state__003_ 0 in
          let t_2__007_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.cons a_2
                       t_2__006_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 13;
                                    pos_bol = 514;
                                    pos_cnum = 539
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 13;
                                    pos_bol = 514;
                                    pos_cnum = 571
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__003_ 1) t_2__007_
      | Transfer ->
          let t1__008_ = Model.get state__003_ 0
          and t2__009_ = Model.get state__003_ 1 in
          let t1__011_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.Sequence.singleton
                       (Ortac_runtime.Gospelstdlib.Sequence.hd
                          t1__008_.contents)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 19;
                                    pos_bol = 778;
                                    pos_cnum = 804
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 19;
                                    pos_bol = 778;
                                    pos_cnum = 854
                                  }
                              })))
              }
          and t2__010_ =
            let open ModelElt in
              {
                contents =
                  (try
                     Ortac_runtime.Gospelstdlib.(++)
                       (Ortac_runtime.Gospelstdlib.Sequence.tl
                          t1__008_.contents) t2__009_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 20;
                                    pos_bol = 855;
                                    pos_cnum = 911
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "invariants.mli";
                                    pos_lnum = 20;
                                    pos_bol = 855;
                                    pos_cnum = 913
                                  }
                              })))
              } in
          Model.push (Model.push (Model.drop_n state__003_ 2) t2__010_)
            t1__011_
    let precond cmd__022_ state__023_ =
      match cmd__022_ with
      | Create a_1 -> true
      | Push a_2 -> let t_2__024_ = Model.get state__023_ 0 in true
      | Transfer ->
          let t1__025_ = Model.get state__023_ 0
          and t2__026_ = Model.get state__023_ 1 in true
    let postcond _ _ _ = true
    let run cmd__027_ sut__028_ =
      match cmd__027_ with
      | Create a_1 ->
          Res
            (sut,
              (let res__029_ = create a_1 in
               (SUT.push sut__028_ res__029_; res__029_)))
      | Push a_2 ->
          Res
            (unit,
              (let t_2__030_ = SUT.pop sut__028_ in
               let res__031_ = push a_2 t_2__030_ in
               (SUT.push sut__028_ t_2__030_; res__031_)))
      | Transfer ->
          Res
            (unit,
              (let t1__032_ = SUT.pop sut__028_ in
               let t2__033_ = SUT.pop sut__028_ in
               let res__034_ = transfer t1__032_ t2__033_ in
               (SUT.push sut__028_ t2__033_;
                SUT.push sut__028_ t1__032_;
                res__034_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () =
  let __state__035_ = Model.get Spec.init_state 0 in
  if
    not
      (try
         Ortac_runtime.Gospelstdlib.(>)
           (Ortac_runtime.Gospelstdlib.Sequence.length __state__035_.contents)
           (Ortac_runtime.Gospelstdlib.integer_of_int 0)
       with
       | e ->
           raise
             (Ortac_runtime.Partial_function
                (e,
                  {
                    Ortac_runtime.start =
                      {
                        pos_fname = "invariants.mli";
                        pos_lnum = 4;
                        pos_bol = 114;
                        pos_cnum = 128
                      };
                    Ortac_runtime.stop =
                      {
                        pos_fname = "invariants.mli";
                        pos_lnum = 4;
                        pos_bol = 114;
                        pos_cnum = 158
                      }
                  })))
  then QCheck.Test.fail_report "INIT_SUT violates type invariants for SUT"
let ortac_show_cmd cmd__036_ state__037_ =
  let open Spec in
    match cmd__036_ with
    | Create a_1 ->
        Format.asprintf "%s %a" "create" (Util.Pp.pp_int true) a_1
    | Push a_2 ->
        Format.asprintf "%s %a %s" "push" (Util.Pp.pp_int true) a_2
          (SUT.get_name state__037_ 0)
    | Transfer ->
        Format.asprintf "%s %s %s" "transfer" (SUT.get_name state__037_ 0)
          (SUT.get_name state__037_ 1)
let ortac_postcond cmd__012_ state__013_ res__014_ =
  let open Spec in
    let open STM in
      let new_state__015_ = lazy (next_state cmd__012_ state__013_) in
      match (cmd__012_, res__014_) with
      | (Create a_1, Res ((SUT, _), t_1)) -> None
      | (Push a_2, Res ((Unit, _), _)) ->
          if
            let t__016_ = lazy (Model.get (Lazy.force new_state__015_) 0) in
            (try
               Ortac_runtime.Gospelstdlib.(>)
                 (Ortac_runtime.Gospelstdlib.Sequence.length
                    (Lazy.force t__016_).contents)
                 (Ortac_runtime.Gospelstdlib.integer_of_int 0)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "invariants.mli";
                              pos_lnum = 4;
                              pos_bol = 114;
                              pos_cnum = 128
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "invariants.mli";
                              pos_lnum = 4;
                              pos_bol = 114;
                              pos_cnum = 158
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Invariants" "create 42"
                 (Either.right (Res (unit, ()))) "push"
                 [("Sequence.length x.contents > 0",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "invariants.mli";
                          pos_lnum = 4;
                          pos_bol = 114;
                          pos_cnum = 128
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "invariants.mli";
                          pos_lnum = 4;
                          pos_bol = 114;
                          pos_cnum = 158
                        }
                    })])
      | (Transfer, Res ((Unit, _), _)) ->
          Ortac_runtime.append
            (if
               let t1__018_ = lazy (Model.get (Lazy.force new_state__015_) 0) in
               try
                 Ortac_runtime.Gospelstdlib.(>)
                   (Ortac_runtime.Gospelstdlib.Sequence.length
                      (Lazy.force t1__018_).contents)
                   (Ortac_runtime.Gospelstdlib.integer_of_int 0)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "invariants.mli";
                                pos_lnum = 4;
                                pos_bol = 114;
                                pos_cnum = 128
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "invariants.mli";
                                pos_lnum = 4;
                                pos_bol = 114;
                                pos_cnum = 158
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Invariants" "create 42"
                    (Either.right (Res (unit, ()))) "transfer"
                    [("Sequence.length x.contents > 0",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "invariants.mli";
                             pos_lnum = 4;
                             pos_bol = 114;
                             pos_cnum = 128
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "invariants.mli";
                             pos_lnum = 4;
                             pos_bol = 114;
                             pos_cnum = 158
                           }
                       })]))
            (if
               let t2__019_ = lazy (Model.get (Lazy.force new_state__015_) 1) in
               try
                 Ortac_runtime.Gospelstdlib.(>)
                   (Ortac_runtime.Gospelstdlib.Sequence.length
                      (Lazy.force t2__019_).contents)
                   (Ortac_runtime.Gospelstdlib.integer_of_int 0)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "invariants.mli";
                                pos_lnum = 4;
                                pos_bol = 114;
                                pos_cnum = 128
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "invariants.mli";
                                pos_lnum = 4;
                                pos_bol = 114;
                                pos_cnum = 158
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Invariants" "create 42"
                    (Either.right (Res (unit, ()))) "transfer"
                    [("Sequence.length x.contents > 0",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "invariants.mli";
                             pos_lnum = 4;
                             pos_bol = 114;
                             pos_cnum = 128
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "invariants.mli";
                             pos_lnum = 4;
                             pos_bol = 114;
                             pos_cnum = 158
                           }
                       })]))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Invariants STM tests" 2
        check_init_state ortac_show_cmd ortac_postcond])
