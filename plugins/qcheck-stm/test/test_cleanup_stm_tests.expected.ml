(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Test_cleanup
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = t
                             let init = Some (fun () -> create ())
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      m: Ortac_runtime.integer }
    let init =
      Some
        (let () = () in
         {
           m =
             (try Ortac_runtime.Gospelstdlib.integer_of_int 0
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "test_cleanup.mli";
                               pos_lnum = 6;
                               pos_bol = 227;
                               pos_cnum = 245
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "test_cleanup.mli";
                               pos_lnum = 6;
                               pos_bol = 227;
                               pos_cnum = 246
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Use 
    let show_cmd cmd__001_ =
      match cmd__001_ with | Use -> Format.asprintf "%s sut" "use"
    let cleanup t = ignore t
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd (let open Gen in oneof [pure Use])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Use ->
          let tmp__004_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              m =
                (try
                   Ortac_runtime.Gospelstdlib.(+)
                     (Ortac_runtime.Gospelstdlib.integer_of_int 1)
                     tmp__004_.m
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "test_cleanup.mli";
                                  pos_lnum = 11;
                                  pos_bol = 377;
                                  pos_cnum = 397
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "test_cleanup.mli";
                                  pos_lnum = 11;
                                  pos_bol = 377;
                                  pos_cnum = 398
                                }
                            })))
            }
    let precond cmd__010_ state__011_ = match cmd__010_ with | Use -> true
    let postcond _ _ _ = true
    let run cmd__012_ sut__013_ =
      match cmd__012_ with
      | Use ->
          Res
            (unit,
              (let tmp__014_ = SUT.pop sut__013_ in
               let res__015_ = use tmp__014_ in
               (SUT.push tmp__014_ sut__013_; res__015_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__005_ state__006_ res__007_ =
  let open Spec in
    let open STM in
      let new_state__008_ = lazy (next_state cmd__005_ state__006_) in
      match (cmd__005_, res__007_) with
      | (Use, Res ((Unit, _), _)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Test_cleanup STM tests"
        check_init_state ortac_postcond])
