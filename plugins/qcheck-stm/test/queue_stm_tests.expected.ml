(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Queue
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = int t
                             let init = Some (fun () -> create ())
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      Some
        (let () = () in
         {
           contents =
             (try Ortac_runtime.Gospelstdlib.Sequence.empty
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 8;
                               pos_bol = 244;
                               pos_cnum = 269
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 8;
                               pos_bol = 244;
                               pos_cnum = 283
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Push of int 
      | Pop 
      | Clear 
      | Is_empty 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Push v -> Format.asprintf "%s %a sut" "push" (Util.Pp.pp_int true) v
      | Pop -> Format.asprintf "protect (fun () -> %s sut)" "pop"
      | Clear -> Format.asprintf "%s sut" "clear"
      | Is_empty -> Format.asprintf "%s sut" "is_empty"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun v -> Push v)) <*> int;
               pure Pop;
               pure Clear;
               pure Is_empty])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Push v ->
          let tmp__004_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   Ortac_runtime.Gospelstdlib.Sequence.snoc
                     tmp__004_.contents v
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 13;
                                  pos_bol = 441;
                                  pos_cnum = 466
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 13;
                                  pos_bol = 441;
                                  pos_cnum = 498
                                }
                            })))
            }
      | Pop ->
          let tmp__005_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match Ortac_runtime.Gospelstdlib.Sequence.length
                           tmp__005_.contents
                   with
                   | __x__006_ when
                       (=) __x__006_
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       -> Ortac_runtime.Gospelstdlib.Sequence.empty
                   | _ ->
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         tmp__005_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 19;
                                  pos_bol = 732;
                                  pos_cnum = 757
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 21;
                                  pos_bol = 831;
                                  pos_cnum = 874
                                }
                            })))
            }
      | Clear ->
          let tmp__007_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try Ortac_runtime.Gospelstdlib.Sequence.empty
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 28;
                                  pos_bol = 1122;
                                  pos_cnum = 1147
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 28;
                                  pos_bol = 1122;
                                  pos_cnum = 1161
                                }
                            })))
            }
      | Is_empty -> state__003_
    let precond cmd__033_ state__034_ =
      match cmd__033_ with
      | Push v -> true
      | Pop -> true
      | Clear -> true
      | Is_empty -> true
    let postcond _ _ _ = true
    let run cmd__035_ sut__036_ =
      match cmd__035_ with
      | Push v ->
          Res
            (unit,
              (let tmp__037_ = SUT.pop sut__036_ in
               let res__038_ = push v tmp__037_ in
               (SUT.push tmp__037_ sut__036_; res__038_)))
      | Pop ->
          Res
            ((result int exn),
              (let tmp__039_ = SUT.pop sut__036_ in
               let res__040_ = protect (fun () -> pop tmp__039_) () in
               (SUT.push tmp__039_ sut__036_; res__040_)))
      | Clear ->
          Res
            (unit,
              (let tmp__041_ = SUT.pop sut__036_ in
               let res__042_ = clear tmp__041_ in
               (SUT.push tmp__041_ sut__036_; res__042_)))
      | Is_empty ->
          Res
            (bool,
              (let tmp__043_ = SUT.pop sut__036_ in
               let res__044_ = is_empty tmp__043_ in
               (SUT.push tmp__043_ sut__036_; res__044_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__009_ state__010_ res__011_ =
  let open Spec in
    let open STM in
      let new_state__012_ = lazy (next_state cmd__009_ state__010_) in
      match (cmd__009_, res__011_) with
      | (Push v, Res ((Unit, _), _)) -> None
      | (Pop, Res ((Result (Int, Exn), _), v_1)) ->
          (match v_1 with
           | Ok v_1 ->
               Ortac_runtime.append
                 (if
                    let t_new__017_ =
                      lazy (Model.get (Lazy.force new_state__012_) 0) in
                    let t_old__016_ = lazy (Model.get state__010_ 0) in
                    try
                      v_1 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           (Lazy.force t_old__016_).contents)
                    with
                    | e ->
                        raise
                          (Ortac_runtime.Partial_function
                             (e,
                               {
                                 Ortac_runtime.start =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 22;
                                     pos_bol = 875;
                                     pos_cnum = 887
                                   };
                                 Ortac_runtime.stop =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 22;
                                     pos_bol = 875;
                                     pos_cnum = 919
                                   }
                               }))
                  then None
                  else
                    Some
                      (Ortac_runtime.report "Queue" "create ()"
                         (Either.right
                            (Res
                               (int,
                                 (let t_new__015_ =
                                    lazy
                                      (Model.get (Lazy.force new_state__012_)
                                         0) in
                                  let t_old__014_ =
                                    lazy (Model.get state__010_ 0) in
                                  try
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      (Lazy.force t_old__014_).contents
                                  with
                                  | e ->
                                      raise
                                        (Ortac_runtime.Partial_function
                                           (e,
                                             {
                                               Ortac_runtime.start =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 891
                                                 };
                                               Ortac_runtime.stop =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 919
                                                 }
                                             })))))) "pop"
                         [("v = Sequence.hd (old t.contents)",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 22;
                                  pos_bol = 875;
                                  pos_cnum = 887
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 22;
                                  pos_bol = 875;
                                  pos_cnum = 919
                                }
                            })]))
                 (if
                    let t_new__019_ =
                      lazy (Model.get (Lazy.force new_state__012_) 0) in
                    let t_old__018_ = lazy (Model.get state__010_ 0) in
                    try
                      not
                        ((Lazy.force t_old__018_).contents =
                           Ortac_runtime.Gospelstdlib.Sequence.empty)
                    with
                    | e ->
                        raise
                          (Ortac_runtime.Partial_function
                             (e,
                               {
                                 Ortac_runtime.start =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 23;
                                     pos_bol = 920;
                                     pos_cnum = 932
                                   };
                                 Ortac_runtime.stop =
                                   {
                                     pos_fname = "queue.mli";
                                     pos_lnum = 23;
                                     pos_bol = 920;
                                     pos_cnum = 964
                                   }
                               }))
                  then None
                  else
                    Some
                      (Ortac_runtime.report "Queue" "create ()"
                         (Either.right
                            (Res
                               (int,
                                 (let t_new__015_ =
                                    lazy
                                      (Model.get (Lazy.force new_state__012_)
                                         0) in
                                  let t_old__014_ =
                                    lazy (Model.get state__010_ 0) in
                                  try
                                    Ortac_runtime.Gospelstdlib.Sequence.hd
                                      (Lazy.force t_old__014_).contents
                                  with
                                  | e ->
                                      raise
                                        (Ortac_runtime.Partial_function
                                           (e,
                                             {
                                               Ortac_runtime.start =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 891
                                                 };
                                               Ortac_runtime.stop =
                                                 {
                                                   pos_fname = "queue.mli";
                                                   pos_lnum = 22;
                                                   pos_bol = 875;
                                                   pos_cnum = 919
                                                 }
                                             })))))) "pop"
                         [("old t.contents <> Sequence.empty",
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 23;
                                  pos_bol = 920;
                                  pos_cnum = 932
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "queue.mli";
                                  pos_lnum = 23;
                                  pos_bol = 920;
                                  pos_cnum = 964
                                }
                            })]))
           | Error (Empty) ->
               if
                 let t_new__021_ =
                   lazy (Model.get (Lazy.force new_state__012_) 0) in
                 let t_old__020_ = lazy (Model.get state__010_ 0) in
                 (try
                    let __t1__022_ =
                      (Lazy.force t_new__021_).contents =
                        (Lazy.force t_old__020_).contents in
                    let __t2__023_ =
                      (Lazy.force t_old__020_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    __t1__022_ && __t2__023_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 17;
                                   pos_bol = 643;
                                   pos_cnum = 663
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "queue.mli";
                                   pos_lnum = 17;
                                   pos_bol = 643;
                                   pos_cnum = 707
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Queue" "create ()"
                      (Either.left "Empty") "pop"
                      [("t.contents = old t.contents = Sequence.empty",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 17;
                               pos_bol = 643;
                               pos_cnum = 663
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "queue.mli";
                               pos_lnum = 17;
                               pos_bol = 643;
                               pos_cnum = 707
                             }
                         })])
           | _ -> None)
      | (Clear, Res ((Unit, _), _)) -> None
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            let t_new__030_ = lazy (Model.get (Lazy.force new_state__012_) 0) in
            let t_old__029_ = lazy (Model.get state__010_ 0) in
            (try
               b =
                 (match Ortac_runtime.Gospelstdlib.Sequence.length
                          (Lazy.force t_new__030_).contents
                  with
                  | __x__031_ when
                      (=) __x__031_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> true
                  | _ -> false)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 32;
                              pos_bol = 1300;
                              pos_cnum = 1312
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "queue.mli";
                              pos_lnum = 34;
                              pos_bol = 1374;
                              pos_cnum = 1394
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Queue" "create ()"
                 (Either.right
                    (Res
                       (bool,
                         (let t_new__027_ =
                            lazy (Model.get (Lazy.force new_state__012_) 0) in
                          let t_old__026_ = lazy (Model.get state__010_ 0) in
                          try
                            match Ortac_runtime.Gospelstdlib.Sequence.length
                                    (Lazy.force t_new__027_).contents
                            with
                            | __x__028_ when
                                (=) __x__028_
                                  (Ortac_runtime.Gospelstdlib.integer_of_int
                                     0)
                                -> true
                            | _ -> false
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "queue.mli";
                                           pos_lnum = 32;
                                           pos_bol = 1300;
                                           pos_cnum = 1316
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "queue.mli";
                                           pos_lnum = 34;
                                           pos_bol = 1374;
                                           pos_cnum = 1394
                                         }
                                     })))))) "is_empty"
                 [("b = match Sequence.length t.contents with\n        | 0 -> true\n        | _ -> false",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 32;
                          pos_bol = 1300;
                          pos_cnum = 1312
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "queue.mli";
                          pos_lnum = 34;
                          pos_bol = 1374;
                          pos_cnum = 1394
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Queue STM tests" check_init_state
        ortac_postcond])
