(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Custom_config
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = int t
                             let init = Some (fun () -> empty ())
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      Some
        (let () = () in
         {
           contents =
             (try Ortac_runtime.Gospelstdlib.Sequence.empty
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "custom_config.mli";
                               pos_lnum = 12;
                               pos_bol = 421;
                               pos_cnum = 446
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "custom_config.mli";
                               pos_lnum = 12;
                               pos_bol = 421;
                               pos_cnum = 460
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen =
          struct
            include Gen
            let int = small_signed_int
            let elt gen = elt <$> gen
          end
      end
    module Util =
      struct
        module Pp =
          struct
            include Util.Pp
            let pp_elt pp par fmt e =
              let open Format in fprintf fmt "(Elt %a)" (pp par) (proj e)
          end
      end
    type _ ty +=  
      | Elt: 'a ty -> 'a elt ty 
    let elt spec =
      let (ty, show) = spec in
      ((Elt ty), (fun x -> Printf.sprintf "Elt %s" (show (proj x))))
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Proj of char elt 
      | Push of int elt 
      | Top 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Proj __arg0 ->
          Format.asprintf "%s %a" "proj"
            (Util.Pp.pp_elt Util.Pp.pp_char true) __arg0
      | Push e ->
          Format.asprintf "%s sut %a" "push"
            (Util.Pp.pp_elt Util.Pp.pp_int true) e
      | Top -> Format.asprintf "protect (fun () -> %s sut)" "top"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun __arg0 -> Proj __arg0)) <*> (elt char);
               (pure (fun e -> Push e)) <*> (elt int);
               pure Top])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Proj __arg0 -> state__003_
      | Push e ->
          let tmp__004_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   Ortac_runtime.Gospelstdlib.Sequence.cons (proj e)
                     tmp__004_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "custom_config.mli";
                                  pos_lnum = 17;
                                  pos_bol = 639;
                                  pos_cnum = 664
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "custom_config.mli";
                                  pos_lnum = 17;
                                  pos_bol = 639;
                                  pos_cnum = 703
                                }
                            })))
            }
      | Top -> state__003_
    let precond cmd__014_ state__015_ =
      match cmd__014_ with
      | Proj __arg0 -> true
      | Push e -> true
      | Top -> true
    let postcond _ _ _ = true
    let run cmd__016_ sut__017_ =
      match cmd__016_ with
      | Proj __arg0 -> Res (char, (let res__018_ = proj __arg0 in res__018_))
      | Push e ->
          Res
            (unit,
              (let tmp__019_ = SUT.pop sut__017_ in
               let res__020_ = push tmp__019_ e in
               (SUT.push tmp__019_ sut__017_; res__020_)))
      | Top ->
          Res
            ((result (elt int) exn),
              (let tmp__021_ = SUT.pop sut__017_ in
               let res__022_ = protect (fun () -> top tmp__021_) () in
               (SUT.push tmp__021_ sut__017_; res__022_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__006_ state__007_ res__008_ =
  let open Spec in
    let open STM in
      let new_state__009_ = lazy (next_state cmd__006_ state__007_) in
      match (cmd__006_, res__008_) with
      | (Proj __arg0, Res ((Char, _), result)) -> None
      | (Push e, Res ((Unit, _), _)) -> None
      | (Top, Res ((Result (Elt (Int), Exn), _), a_1)) ->
          (match if
                   let tmp__013_ = Model.get state__007_ 0 in
                   try
                     not
                       (tmp__013_.contents =
                          Ortac_runtime.Gospelstdlib.Sequence.empty)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "custom_config.mli";
                                    pos_lnum = 21;
                                    pos_bol = 875;
                                    pos_cnum = 886
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "custom_config.mli";
                                    pos_lnum = 21;
                                    pos_bol = 875;
                                    pos_cnum = 914
                                  }
                              }))
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Custom_config" "empty ()"
                        (Either.left "Invalid_argument") "top"
                        [("t.contents <> Sequence.empty",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "custom_config.mli";
                                 pos_lnum = 21;
                                 pos_bol = 875;
                                 pos_cnum = 886
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "custom_config.mli";
                                 pos_lnum = 21;
                                 pos_bol = 875;
                                 pos_cnum = 914
                               }
                           })])
           with
           | None ->
               (match a_1 with
                | Ok a_1 ->
                    if
                      let t_new__012_ =
                        lazy (Model.get (Lazy.force new_state__009_) 0) in
                      let t_old__011_ = lazy (Model.get state__007_ 0) in
                      (try
                         (proj a_1) =
                           (Ortac_runtime.Gospelstdlib.Sequence.hd
                              (Lazy.force t_new__012_).contents)
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "custom_config.mli";
                                        pos_lnum = 22;
                                        pos_bol = 915;
                                        pos_cnum = 927
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "custom_config.mli";
                                        pos_lnum = 22;
                                        pos_bol = 915;
                                        pos_cnum = 958
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Custom_config" "empty ()"
                           (Either.right (Res (Ortac_runtime.dummy, ())))
                           "top"
                           [("proj a = Sequence.hd t.contents",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "custom_config.mli";
                                    pos_lnum = 22;
                                    pos_bol = 915;
                                    pos_cnum = 927
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "custom_config.mli";
                                    pos_lnum = 22;
                                    pos_bol = 915;
                                    pos_cnum = 958
                                  }
                              })])
                | _ -> None)
           | _ ->
               (match a_1 with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      let tmp__013_ = Model.get state__007_ 0 in
                      (try
                         not
                           (tmp__013_.contents =
                              Ortac_runtime.Gospelstdlib.Sequence.empty)
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "custom_config.mli";
                                        pos_lnum = 21;
                                        pos_bol = 875;
                                        pos_cnum = 886
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "custom_config.mli";
                                        pos_lnum = 21;
                                        pos_bol = 875;
                                        pos_cnum = 914
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Custom_config" "empty ()"
                           (Either.left "Invalid_argument") "top"
                           [("t.contents <> Sequence.empty",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "custom_config.mli";
                                    pos_lnum = 21;
                                    pos_bol = 875;
                                    pos_cnum = 886
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "custom_config.mli";
                                    pos_lnum = 21;
                                    pos_bol = 875;
                                    pos_cnum = 914
                                  }
                              })])))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Custom_config STM tests"
        check_init_state ortac_postcond])
