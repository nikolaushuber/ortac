(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Test_without_sut
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = int t
                                  let init () = make 16 0 end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int list }
    let init =
      let i = 16
      and a_2 = 0 in
      {
        contents =
          (try
             Ortac_runtime.Gospelstdlib.List.init
               (Ortac_runtime.Gospelstdlib.integer_of_int i) (fun j -> a_2)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "test_without_sut.mli";
                            pos_lnum = 6;
                            pos_bol = 265;
                            pos_cnum = 290
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "test_without_sut.mli";
                            pos_lnum = 6;
                            pos_bol = 265;
                            pos_cnum = 314
                          }
                      })))
      }
    let max_suts = 0
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    module QCheck =
      struct
        include QCheck
        module Gen = struct include Gen
                            let int = small_signed_int end
      end
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create 0
    type state = Model.t
    let init_state = Model.create 0 ()
    type cmd =
      | Add of int * int 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Add (a_1, b) ->
          Format.asprintf "%s %a %a" "add" (Util.Pp.pp_int true) a_1
            (Util.Pp.pp_int true) b
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [((pure (fun a_1 -> fun b -> Add (a_1, b))) <*> int) <*> int])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with | Add (a_1, b) -> state__003_
    let precond cmd__008_ state__009_ =
      match cmd__008_ with | Add (a_1, b) -> true
    let postcond _ _ _ = true
    let run cmd__010_ sut__011_ =
      match cmd__010_ with
      | Add (a_1, b) -> Res (int, (let res__012_ = add a_1 b in res__012_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__014_ state__015_ =
  let open Spec in
    match cmd__014_ with
    | Add (a_1, b) ->
        Format.asprintf "%s %a %a" "add" (Util.Pp.pp_int true) a_1
          (Util.Pp.pp_int true) b
let ortac_postcond cmd__004_ state__005_ res__006_ =
  let open Spec in
    let open STM in
      let new_state__007_ = lazy (next_state cmd__004_ state__005_) in
      match (cmd__004_, res__006_) with
      | (Add (a_1, b), Res ((Int, _), c)) ->
          if
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int c) =
                 (Ortac_runtime.Gospelstdlib.(+)
                    (Ortac_runtime.Gospelstdlib.integer_of_int a_1)
                    (Ortac_runtime.Gospelstdlib.integer_of_int b))
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "test_without_sut.mli";
                              pos_lnum = 10;
                              pos_bol = 480;
                              pos_cnum = 492
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "test_without_sut.mli";
                              pos_lnum = 10;
                              pos_bol = 480;
                              pos_cnum = 501
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Test_without_sut" "make 16 0"
                 (Either.right
                    (Res
                       (integer,
                         (try
                            Ortac_runtime.Gospelstdlib.(+)
                              (Ortac_runtime.Gospelstdlib.integer_of_int a_1)
                              (Ortac_runtime.Gospelstdlib.integer_of_int b)
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "test_without_sut.mli";
                                           pos_lnum = 10;
                                           pos_bol = 480;
                                           pos_cnum = 498
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "test_without_sut.mli";
                                           pos_lnum = 10;
                                           pos_bol = 480;
                                           pos_cnum = 499
                                         }
                                     })))))) "add"
                 [("c = a + b",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "test_without_sut.mli";
                          pos_lnum = 10;
                          pos_bol = 480;
                          pos_cnum = 492
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "test_without_sut.mli";
                          pos_lnum = 10;
                          pos_bol = 480;
                          pos_cnum = 501
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Test_without_sut STM tests" 0
        check_init_state ortac_show_cmd ortac_postcond])
