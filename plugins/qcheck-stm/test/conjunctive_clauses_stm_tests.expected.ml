(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Conjunctive_clauses
module Ortac_runtime = Ortac_runtime_qcheck_stm
let set_contents c i a_1 =
  try
    Ortac_runtime.Gospelstdlib.List.mapi
      (fun j -> fun x -> if i = j then a_1 else x) c
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "conjunctive_clauses.mli";
                   pos_lnum = 10;
                   pos_bol = 580;
                   pos_cnum = 590
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "conjunctive_clauses.mli";
                   pos_lnum = 10;
                   pos_bol = 580;
                   pos_cnum = 637
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init () = make 42 'a'
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: char list }
    let init =
      let i_2 = 42
      and a_3 = 'a' in
      {
        contents =
          (try
             Ortac_runtime.Gospelstdlib.List.init
               (Ortac_runtime.Gospelstdlib.integer_of_int i_2) (fun _ -> a_3)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "conjunctive_clauses.mli";
                            pos_lnum = 7;
                            pos_bol = 295;
                            pos_cnum = 336
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "conjunctive_clauses.mli";
                            pos_lnum = 7;
                            pos_bol = 295;
                            pos_cnum = 360
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Set of int * char 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Set (i_1, a_2) ->
          Format.asprintf "protect (fun () -> %s <sut> %a %a)" "set"
            (Util.Pp.pp_int true) i_1 (Util.Pp.pp_char true) a_2
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [((pure (fun i_1 -> fun a_2 -> Set (i_1, a_2))) <*> int) <*>
                  char])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Set (i_1, a_2) ->
          let t_1__004_ = Model.get state__003_ 0 in
          if
            (try
               let __t1__006_ =
                 Ortac_runtime.Gospelstdlib.(<=)
                   (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
               let __t2__007_ =
                 Ortac_runtime.Gospelstdlib.(<)
                   (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                   (Ortac_runtime.Gospelstdlib.List.length t_1__004_.contents) in
               __t1__006_ && __t2__007_
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "conjunctive_clauses.mli";
                              pos_lnum = 14;
                              pos_bol = 825;
                              pos_cnum = 836
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "conjunctive_clauses.mli";
                              pos_lnum = 14;
                              pos_bol = 825;
                              pos_cnum = 867
                            }
                        })))
          then
            let t_1__005_ =
              let open ModelElt in
                {
                  contents =
                    (try
                       set_contents t_1__004_.contents
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_1) a_2
                     with
                     | e ->
                         raise
                           (Ortac_runtime.Partial_function
                              (e,
                                {
                                  Ortac_runtime.start =
                                    {
                                      pos_fname = "conjunctive_clauses.mli";
                                      pos_lnum = 16;
                                      pos_bol = 883;
                                      pos_cnum = 924
                                    };
                                  Ortac_runtime.stop =
                                    {
                                      pos_fname = "conjunctive_clauses.mli";
                                      pos_lnum = 16;
                                      pos_bol = 883;
                                      pos_cnum = 936
                                    }
                                })))
                } in
            Model.push (Model.drop_n state__003_ 1) t_1__005_
          else state__003_
    let precond cmd__015_ state__016_ =
      match cmd__015_ with
      | Set (i_1, a_2) -> let t_1__017_ = Model.get state__016_ 0 in true
    let postcond _ _ _ = true
    let run cmd__018_ sut__019_ =
      match cmd__018_ with
      | Set (i_1, a_2) ->
          Res
            ((result unit exn),
              (let t_1__020_ = SUT.pop sut__019_ in
               let res__021_ = protect (fun () -> set t_1__020_ i_1 a_2) () in
               (SUT.push sut__019_ t_1__020_; res__021_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__023_ state__024_ =
  let open Spec in
    match cmd__023_ with
    | Set (i_1, a_2) ->
        Format.asprintf "protect (fun () -> %s %s %a %a)" "set"
          (SUT.get_name state__024_ 0) (Util.Pp.pp_int true) i_1
          (Util.Pp.pp_char true) a_2
let ortac_postcond cmd__008_ state__009_ res__010_ =
  let open Spec in
    let open STM in
      let new_state__011_ = lazy (next_state cmd__008_ state__009_) in
      match (cmd__008_, res__010_) with
      | (Set (i_1, a_2), Res ((Result (Unit, Exn), _), res)) ->
          (match if
                   let tmp__012_ = Model.get state__009_ 0 in
                   try
                     let __t1__013_ =
                       Ortac_runtime.Gospelstdlib.(<=)
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
                     let __t2__014_ =
                       Ortac_runtime.Gospelstdlib.(<)
                         (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                         (Ortac_runtime.Gospelstdlib.List.length
                            tmp__012_.contents) in
                     __t1__013_ && __t2__014_
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "conjunctive_clauses.mli";
                                    pos_lnum = 14;
                                    pos_bol = 825;
                                    pos_cnum = 836
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "conjunctive_clauses.mli";
                                    pos_lnum = 14;
                                    pos_bol = 825;
                                    pos_cnum = 867
                                  }
                              }))
                 then None
                 else
                   Some
                     (Ortac_runtime.report "Conjunctive_clauses"
                        "make 42 'a'" (Either.left "Invalid_argument") "set"
                        [("0 <= i < List.length t.contents",
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "conjunctive_clauses.mli";
                                 pos_lnum = 14;
                                 pos_bol = 825;
                                 pos_cnum = 836
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "conjunctive_clauses.mli";
                                 pos_lnum = 14;
                                 pos_bol = 825;
                                 pos_cnum = 867
                               }
                           })])
           with
           | None -> (match res with | Ok _ -> None | _ -> None)
           | _ ->
               (match res with
                | Error (Invalid_argument _) -> None
                | _ ->
                    if
                      let tmp__012_ = Model.get state__009_ 0 in
                      (try
                         let __t1__013_ =
                           Ortac_runtime.Gospelstdlib.(<=)
                             (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_1) in
                         let __t2__014_ =
                           Ortac_runtime.Gospelstdlib.(<)
                             (Ortac_runtime.Gospelstdlib.integer_of_int i_1)
                             (Ortac_runtime.Gospelstdlib.List.length
                                tmp__012_.contents) in
                         __t1__013_ && __t2__014_
                       with
                       | e ->
                           raise
                             (Ortac_runtime.Partial_function
                                (e,
                                  {
                                    Ortac_runtime.start =
                                      {
                                        pos_fname = "conjunctive_clauses.mli";
                                        pos_lnum = 14;
                                        pos_bol = 825;
                                        pos_cnum = 836
                                      };
                                    Ortac_runtime.stop =
                                      {
                                        pos_fname = "conjunctive_clauses.mli";
                                        pos_lnum = 14;
                                        pos_bol = 825;
                                        pos_cnum = 867
                                      }
                                  })))
                    then None
                    else
                      Some
                        (Ortac_runtime.report "Conjunctive_clauses"
                           "make 42 'a'" (Either.left "Invalid_argument")
                           "set"
                           [("0 <= i < List.length t.contents",
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "conjunctive_clauses.mli";
                                    pos_lnum = 14;
                                    pos_bol = 825;
                                    pos_cnum = 836
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "conjunctive_clauses.mli";
                                    pos_lnum = 14;
                                    pos_bol = 825;
                                    pos_cnum = 867
                                  }
                              })])))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Conjunctive_clauses STM tests" 1
        check_init_state ortac_show_cmd ortac_postcond])
