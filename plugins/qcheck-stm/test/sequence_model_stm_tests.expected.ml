(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Sequence_model
module Ortac_runtime = Ortac_runtime_qcheck_stm
let length_opt s =
  try Some (Ortac_runtime.Gospelstdlib.Sequence.length s)
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "sequence_model.mli";
                   pos_lnum = 15;
                   pos_bol = 750;
                   pos_cnum = 756
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "sequence_model.mli";
                   pos_lnum = 15;
                   pos_bol = 750;
                   pos_cnum = 760
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init = Some (fun () -> create ())
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: char Ortac_runtime.Gospelstdlib.sequence }
    let init =
      Some
        (let () = () in
         {
           contents =
             (try Ortac_runtime.Gospelstdlib.Sequence.empty
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "sequence_model.mli";
                               pos_lnum = 6;
                               pos_bol = 263;
                               pos_cnum = 288
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "sequence_model.mli";
                               pos_lnum = 6;
                               pos_bol = 263;
                               pos_cnum = 302
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Add of char 
      | Remove 
      | Remove_ 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Add v -> Format.asprintf "%s %a sut" "add" (Util.Pp.pp_char true) v
      | Remove -> Format.asprintf "%s sut" "remove"
      | Remove_ -> Format.asprintf "%s sut" "remove_"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun v -> Add v)) <*> char; pure Remove; pure Remove_])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Add v ->
          let tmp__004_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   Ortac_runtime.Gospelstdlib.Sequence.cons v
                     tmp__004_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "sequence_model.mli";
                                  pos_lnum = 11;
                                  pos_bol = 475;
                                  pos_cnum = 500
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "sequence_model.mli";
                                  pos_lnum = 11;
                                  pos_bol = 475;
                                  pos_cnum = 532
                                }
                            })))
            }
      | Remove ->
          let tmp__005_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match Ortac_runtime.Gospelstdlib.Sequence.length
                           tmp__005_.contents
                   with
                   | __x__006_ when
                       (=) __x__006_
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       -> Ortac_runtime.Gospelstdlib.Sequence.empty
                   | _ ->
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         tmp__005_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "sequence_model.mli";
                                  pos_lnum = 20;
                                  pos_bol = 953;
                                  pos_cnum = 978
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "sequence_model.mli";
                                  pos_lnum = 22;
                                  pos_bol = 1070;
                                  pos_cnum = 1131
                                }
                            })))
            }
      | Remove_ ->
          let tmp__007_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match length_opt tmp__007_.contents with
                   | Some __x__008_ when
                       (=) __x__008_
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       -> Ortac_runtime.Gospelstdlib.Sequence.empty
                   | _ ->
                       Ortac_runtime.Gospelstdlib.Sequence.tl
                         tmp__007_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "sequence_model.mli";
                                  pos_lnum = 27;
                                  pos_bol = 1337;
                                  pos_cnum = 1362
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "sequence_model.mli";
                                  pos_lnum = 29;
                                  pos_bol = 1454;
                                  pos_cnum = 1515
                                }
                            })))
            }
    let precond cmd__016_ state__017_ =
      match cmd__016_ with | Add v -> true | Remove -> true | Remove_ -> true
    let postcond _ _ _ = true
    let run cmd__018_ sut__019_ =
      match cmd__018_ with
      | Add v ->
          Res
            (unit,
              (let tmp__020_ = SUT.pop sut__019_ in
               let res__021_ = add v tmp__020_ in
               (SUT.push tmp__020_ sut__019_; res__021_)))
      | Remove ->
          Res
            ((option char),
              (let tmp__022_ = SUT.pop sut__019_ in
               let res__023_ = remove tmp__022_ in
               (SUT.push tmp__022_ sut__019_; res__023_)))
      | Remove_ ->
          Res
            ((option char),
              (let tmp__024_ = SUT.pop sut__019_ in
               let res__025_ = remove_ tmp__024_ in
               (SUT.push tmp__024_ sut__019_; res__025_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__009_ state__010_ res__011_ =
  let open Spec in
    let open STM in
      let new_state__012_ = lazy (next_state cmd__009_ state__010_) in
      match (cmd__009_, res__011_) with
      | (Add v, Res ((Unit, _), _)) -> None
      | (Remove, Res ((Option (Char), _), o)) -> None
      | (Remove_, Res ((Option (Char), _), o_1)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Sequence_model STM tests"
        check_init_state ortac_postcond])
