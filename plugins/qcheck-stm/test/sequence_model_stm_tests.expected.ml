(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Sequence_model
module Ortac_runtime = Ortac_runtime_qcheck_stm
let length_opt s =
  try Some (Ortac_runtime.Gospelstdlib.Sequence.length s)
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "sequence_model.mli";
                   pos_lnum = 15;
                   pos_bol = 750;
                   pos_cnum = 756
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "sequence_model.mli";
                   pos_lnum = 15;
                   pos_bol = 750;
                   pos_cnum = 760
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = char t
                             let init = Some (fun () -> create ())
                           end)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type cmd =
      | Add of char 
      | Remove 
      | Remove_ 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Add v -> Format.asprintf "%s %a sut" "add" (Util.Pp.pp_char true) v
      | Remove -> Format.asprintf "%s sut" "remove"
      | Remove_ -> Format.asprintf "%s sut" "remove_"
    type nonrec state = {
      contents: char Ortac_runtime.Gospelstdlib.sequence }
    let init_state =
      let () = () in
      {
        contents =
          (try Ortac_runtime.Gospelstdlib.Sequence.empty
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "sequence_model.mli";
                            pos_lnum = 6;
                            pos_bol = 263;
                            pos_cnum = 288
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "sequence_model.mli";
                            pos_lnum = 6;
                            pos_bol = 263;
                            pos_cnum = 302
                          }
                      })))
      }
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [(pure (fun v -> Add v)) <*> char; pure Remove; pure Remove_])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Add v ->
          {
            contents =
              ((try
                  Ortac_runtime.Gospelstdlib.Sequence.cons v
                    state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "sequence_model.mli";
                                 pos_lnum = 11;
                                 pos_bol = 475;
                                 pos_cnum = 500
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "sequence_model.mli";
                                 pos_lnum = 11;
                                 pos_bol = 475;
                                 pos_cnum = 532
                               }
                           }))))
          }
      | Remove ->
          {
            contents =
              ((try
                  match Ortac_runtime.Gospelstdlib.Sequence.length
                          state__003_.contents
                  with
                  | __x__004_ when
                      (=) __x__004_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> Ortac_runtime.Gospelstdlib.Sequence.empty
                  | _ ->
                      Ortac_runtime.Gospelstdlib.Sequence.tl
                        state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "sequence_model.mli";
                                 pos_lnum = 20;
                                 pos_bol = 953;
                                 pos_cnum = 978
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "sequence_model.mli";
                                 pos_lnum = 22;
                                 pos_bol = 1070;
                                 pos_cnum = 1131
                               }
                           }))))
          }
      | Remove_ ->
          {
            contents =
              ((try
                  match length_opt state__003_.contents with
                  | Some __x__005_ when
                      (=) __x__005_
                        (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                      -> Ortac_runtime.Gospelstdlib.Sequence.empty
                  | _ ->
                      Ortac_runtime.Gospelstdlib.Sequence.tl
                        state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "sequence_model.mli";
                                 pos_lnum = 27;
                                 pos_bol = 1337;
                                 pos_cnum = 1362
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "sequence_model.mli";
                                 pos_lnum = 29;
                                 pos_bol = 1454;
                                 pos_cnum = 1515
                               }
                           }))))
          }
    let precond cmd__010_ state__011_ =
      match cmd__010_ with | Add v -> true | Remove -> true | Remove_ -> true
    let postcond _ _ _ = true
    let run cmd__012_ sut__013_ =
      match cmd__012_ with
      | Add v ->
          Res
            (unit,
              (let tmp__014_ = SUT.pop sut__013_ in
               let res__015_ = add v tmp__014_ in
               (SUT.push tmp__014_ sut__013_; res__015_)))
      | Remove ->
          Res
            ((option char),
              (let tmp__016_ = SUT.pop sut__013_ in
               let res__017_ = remove tmp__016_ in
               (SUT.push tmp__016_ sut__013_; res__017_)))
      | Remove_ ->
          Res
            ((option char),
              (let tmp__018_ = SUT.pop sut__013_ in
               let res__019_ = remove_ tmp__018_ in
               (SUT.push tmp__018_ sut__013_; res__019_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__006_ state__007_ res__008_ =
  let open Spec in
    let open STM in
      let new_state__009_ = lazy (next_state cmd__006_ state__007_) in
      match (cmd__006_, res__008_) with
      | (Add v, Res ((Unit, _), _)) -> None
      | (Remove, Res ((Option (Char), _), o)) -> None
      | (Remove_, Res ((Option (Char), _), o_1)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Sequence_model STM tests"
        check_init_state ortac_postcond])
