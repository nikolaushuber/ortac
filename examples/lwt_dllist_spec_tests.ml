(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Lwt_dllist_spec
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = int t
                             let init = Some (fun () -> create ())
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: int Ortac_runtime.Gospelstdlib.sequence }
    let init =
      Some
        (let () = () in
         {
           contents =
             (try Ortac_runtime.Gospelstdlib.Sequence.empty
              with
              | e ->
                  raise
                    (Ortac_runtime.Partial_function
                       (e,
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 46;
                               pos_bol = 1807;
                               pos_cnum = 1834
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 46;
                               pos_bol = 1807;
                               pos_cnum = 1848
                             }
                         })))
         })
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Node: 'a ty -> 'a node ty 
    let node spec =
      let (ty, show) = spec in
      ((Node ty), (fun n -> Printf.sprintf "Node %s" (show (get n))))
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type sut = SUT.t
    let init_sut = SUT.create
    type state = Model.t
    let init_state = Model.create ()
    type cmd =
      | Is_empty 
      | Length 
      | Add_l of int 
      | Add_r of int 
      | Take_l 
      | Take_r 
      | Take_opt_l 
      | Take_opt_r 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Is_empty -> Format.asprintf "%s sut" "is_empty"
      | Length -> Format.asprintf "%s sut" "length"
      | Add_l a_1 ->
          Format.asprintf "%s %a sut" "add_l" (Util.Pp.pp_int true) a_1
      | Add_r a_2 ->
          Format.asprintf "%s %a sut" "add_r" (Util.Pp.pp_int true) a_2
      | Take_l -> Format.asprintf "protect (fun () -> %s sut)" "take_l"
      | Take_r -> Format.asprintf "protect (fun () -> %s sut)" "take_r"
      | Take_opt_l -> Format.asprintf "%s sut" "take_opt_l"
      | Take_opt_r -> Format.asprintf "%s sut" "take_opt_r"
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [pure Is_empty;
               pure Length;
               (pure (fun a_1 -> Add_l a_1)) <*> int;
               (pure (fun a_2 -> Add_r a_2)) <*> int;
               pure Take_l;
               pure Take_r;
               pure Take_opt_l;
               pure Take_opt_r])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Is_empty -> state__003_
      | Length -> state__003_
      | Add_l a_1 ->
          let tmp__006_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   Ortac_runtime.Gospelstdlib.Sequence.cons a_1
                     tmp__006_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 64;
                                  pos_bol = 3085;
                                  pos_cnum = 3112
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 64;
                                  pos_bol = 3085;
                                  pos_cnum = 3144
                                }
                            })))
            }
      | Add_r a_2 ->
          let tmp__007_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   Ortac_runtime.Gospelstdlib.Sequence.snoc
                     tmp__007_.contents a_2
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 70;
                                  pos_bol = 3553;
                                  pos_cnum = 3580
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 70;
                                  pos_bol = 3553;
                                  pos_cnum = 3612
                                }
                            })))
            }
      | Take_l ->
          let tmp__008_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   if
                     tmp__008_.contents =
                       Ortac_runtime.Gospelstdlib.Sequence.empty
                   then Ortac_runtime.Gospelstdlib.Sequence.empty
                   else
                     Ortac_runtime.Gospelstdlib.Sequence.tl
                       tmp__008_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 82;
                                  pos_bol = 4150;
                                  pos_cnum = 4177
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 84;
                                  pos_bol = 4259;
                                  pos_cnum = 4319
                                }
                            })))
            }
      | Take_r ->
          let tmp__009_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   if
                     tmp__009_.contents =
                       Ortac_runtime.Gospelstdlib.Sequence.empty
                   then Ortac_runtime.Gospelstdlib.Sequence.empty
                   else
                     Ortac_runtime.Gospelstdlib.__mix_Bddub
                       tmp__009_.contents
                       (Ortac_runtime.Gospelstdlib.(-)
                          (Ortac_runtime.Gospelstdlib.Sequence.length
                             tmp__009_.contents)
                          (Ortac_runtime.Gospelstdlib.integer_of_int 2))
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 96;
                                  pos_bol = 4953;
                                  pos_cnum = 4980
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 98;
                                  pos_bol = 5062;
                                  pos_cnum = 5152
                                }
                            })))
            }
      | Take_opt_l ->
          let tmp__010_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   if
                     (Ortac_runtime.Gospelstdlib.Sequence.length
                        tmp__010_.contents)
                       = (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   then Ortac_runtime.Gospelstdlib.Sequence.empty
                   else
                     Ortac_runtime.Gospelstdlib.Sequence.tl
                       tmp__010_.contents
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 109;
                                  pos_bol = 5855;
                                  pos_cnum = 5882
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 111;
                                  pos_bol = 5969;
                                  pos_cnum = 6029
                                }
                            })))
            }
      | Take_opt_r ->
          let tmp__011_ = Model.get state__003_ 0 in
          Model.push (Model.drop_n state__003_ 1)
            {
              contents =
                (try
                   match Ortac_runtime.Gospelstdlib.Sequence.length
                           tmp__011_.contents
                   with
                   | __x__012_ when
                       (=) __x__012_
                         (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                       -> Ortac_runtime.Gospelstdlib.Sequence.empty
                   | l ->
                       Ortac_runtime.Gospelstdlib.__mix_Bddub
                         tmp__011_.contents
                         (Ortac_runtime.Gospelstdlib.(-) l
                            (Ortac_runtime.Gospelstdlib.integer_of_int 2))
                 with
                 | e ->
                     raise
                       (Ortac_runtime.Partial_function
                          (e,
                            {
                              Ortac_runtime.start =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 121;
                                  pos_bol = 6691;
                                  pos_cnum = 6718
                                };
                              Ortac_runtime.stop =
                                {
                                  pos_fname = "lwt_dllist_spec.mli";
                                  pos_lnum = 123;
                                  pos_bol = 6810;
                                  pos_cnum = 6868
                                }
                            })))
            }
    let precond cmd__047_ state__048_ =
      match cmd__047_ with
      | Is_empty -> true
      | Length -> true
      | Add_l a_1 -> true
      | Add_r a_2 -> true
      | Take_l -> true
      | Take_r -> true
      | Take_opt_l -> true
      | Take_opt_r -> true
    let postcond _ _ _ = true
    let run cmd__049_ sut__050_ =
      match cmd__049_ with
      | Is_empty ->
          Res
            (bool,
              (let tmp__051_ = SUT.pop sut__050_ in
               let res__052_ = is_empty tmp__051_ in
               (SUT.push tmp__051_ sut__050_; res__052_)))
      | Length ->
          Res
            (int,
              (let tmp__053_ = SUT.pop sut__050_ in
               let res__054_ = length tmp__053_ in
               (SUT.push tmp__053_ sut__050_; res__054_)))
      | Add_l a_1 ->
          Res
            ((node int),
              (let tmp__055_ = SUT.pop sut__050_ in
               let res__056_ = add_l a_1 tmp__055_ in
               (SUT.push tmp__055_ sut__050_; res__056_)))
      | Add_r a_2 ->
          Res
            ((node int),
              (let tmp__057_ = SUT.pop sut__050_ in
               let res__058_ = add_r a_2 tmp__057_ in
               (SUT.push tmp__057_ sut__050_; res__058_)))
      | Take_l ->
          Res
            ((result int exn),
              (let tmp__059_ = SUT.pop sut__050_ in
               let res__060_ = protect (fun () -> take_l tmp__059_) () in
               (SUT.push tmp__059_ sut__050_; res__060_)))
      | Take_r ->
          Res
            ((result int exn),
              (let tmp__061_ = SUT.pop sut__050_ in
               let res__062_ = protect (fun () -> take_r tmp__061_) () in
               (SUT.push tmp__061_ sut__050_; res__062_)))
      | Take_opt_l ->
          Res
            ((option int),
              (let tmp__063_ = SUT.pop sut__050_ in
               let res__064_ = take_opt_l tmp__063_ in
               (SUT.push tmp__063_ sut__050_; res__064_)))
      | Take_opt_r ->
          Res
            ((option int),
              (let tmp__065_ = SUT.pop sut__050_ in
               let res__066_ = take_opt_r tmp__065_ in
               (SUT.push tmp__065_ sut__050_; res__066_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__013_ state__014_ res__015_ =
  let open Spec in
    let open STM in
      let new_state__016_ = lazy (next_state cmd__013_ state__014_) in
      match (cmd__013_, res__015_) with
      | (Is_empty, Res ((Bool, _), b)) ->
          if
            let s_new__018_ = lazy (Model.get (Lazy.force new_state__016_) 0) in
            let s_old__017_ = lazy (Model.get state__014_ 0) in
            (try
               (b = true) =
                 ((Lazy.force s_new__018_).contents =
                    Ortac_runtime.Gospelstdlib.Sequence.empty)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 51;
                              pos_bol = 2194;
                              pos_cnum = 2208
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 51;
                              pos_bol = 2194;
                              pos_cnum = 2241
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                 (Either.right (Res (Ortac_runtime.dummy, ()))) "is_empty"
                 [("b <-> s.contents = Sequence.empty",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 51;
                          pos_bol = 2194;
                          pos_cnum = 2208
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 51;
                          pos_bol = 2194;
                          pos_cnum = 2241
                        }
                    })])
      | (Length, Res ((Int, _), l_1)) ->
          if
            let s_new__023_ = lazy (Model.get (Lazy.force new_state__016_) 0) in
            let s_old__022_ = lazy (Model.get state__014_ 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int l_1) =
                 (Ortac_runtime.Gospelstdlib.Sequence.length
                    (Lazy.force s_new__023_).contents)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 58;
                              pos_bol = 2649;
                              pos_cnum = 2663
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 58;
                              pos_bol = 2649;
                              pos_cnum = 2693
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                 (Either.right
                    (Res
                       (integer,
                         (let s_new__021_ =
                            lazy (Model.get (Lazy.force new_state__016_) 0) in
                          let s_old__020_ = lazy (Model.get state__014_ 0) in
                          try
                            Ortac_runtime.Gospelstdlib.Sequence.length
                              (Lazy.force s_new__021_).contents
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "lwt_dllist_spec.mli";
                                           pos_lnum = 58;
                                           pos_bol = 2649;
                                           pos_cnum = 2667
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "lwt_dllist_spec.mli";
                                           pos_lnum = 58;
                                           pos_bol = 2649;
                                           pos_cnum = 2693
                                         }
                                     })))))) "length"
                 [("l = Sequence.length s.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 58;
                          pos_bol = 2649;
                          pos_cnum = 2663
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 58;
                          pos_bol = 2649;
                          pos_cnum = 2693
                        }
                    })])
      | (Add_l a_1, Res ((Node (Int), _), n)) -> None
      | (Add_r a_2, Res ((Node (Int), _), n_1)) -> None
      | (Take_l, Res ((Result (Int, Exn), _), a_3)) ->
          (match a_3 with
           | Ok a_3 ->
               if
                 let s_new__028_ =
                   lazy (Model.get (Lazy.force new_state__016_) 0) in
                 let s_old__027_ = lazy (Model.get state__014_ 0) in
                 (try
                    if
                      (Lazy.force s_old__027_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty
                    then false
                    else
                      a_3 =
                        (Ortac_runtime.Gospelstdlib.Sequence.hd
                           (Lazy.force s_old__027_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 85;
                                   pos_bol = 4320;
                                   pos_cnum = 4334
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 87;
                                   pos_bol = 4394;
                                   pos_cnum = 4445
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                      (Either.right (Res (Ortac_runtime.dummy, ()))) "take_l"
                      [("if old s.contents = Sequence.empty\n              then false\n              else a = Sequence.hd (old s.contents)",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 85;
                               pos_bol = 4320;
                               pos_cnum = 4334
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 87;
                               pos_bol = 4394;
                               pos_cnum = 4445
                             }
                         })])
           | Error (Empty) ->
               if
                 let s_new__030_ =
                   lazy (Model.get (Lazy.force new_state__016_) 0) in
                 let s_old__029_ = lazy (Model.get state__014_ 0) in
                 (try
                    let __t1__031_ =
                      (Lazy.force s_old__029_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    let __t2__032_ =
                      Ortac_runtime.Gospelstdlib.Sequence.empty =
                        (Lazy.force s_new__030_).contents in
                    __t1__031_ && __t2__032_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 88;
                                   pos_bol = 4446;
                                   pos_cnum = 4468
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 88;
                                   pos_bol = 4446;
                                   pos_cnum = 4512
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                      (Either.left "Empty") "take_l"
                      [("old s.contents = Sequence.empty = s.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 88;
                               pos_bol = 4446;
                               pos_cnum = 4468
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 88;
                               pos_bol = 4446;
                               pos_cnum = 4512
                             }
                         })])
           | _ -> None)
      | (Take_r, Res ((Result (Int, Exn), _), a_4)) ->
          (match a_4 with
           | Ok a_4 ->
               if
                 let s_new__035_ =
                   lazy (Model.get (Lazy.force new_state__016_) 0) in
                 let s_old__034_ = lazy (Model.get state__014_ 0) in
                 (try
                    if
                      (Lazy.force s_old__034_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty
                    then false
                    else
                      a_4 =
                        (Ortac_runtime.Gospelstdlib.__mix_Bub
                           (Lazy.force s_old__034_).contents
                           (Ortac_runtime.Gospelstdlib.(-)
                              (Ortac_runtime.Gospelstdlib.Sequence.length
                                 (Lazy.force s_old__034_).contents)
                              (Ortac_runtime.Gospelstdlib.integer_of_int 1)))
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 99;
                                   pos_bol = 5153;
                                   pos_cnum = 5167
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 101;
                                   pos_bol = 5227;
                                   pos_cnum = 5304
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                      (Either.right (Res (Ortac_runtime.dummy, ()))) "take_r"
                      [("if old s.contents = Sequence.empty\n              then false\n              else a = (old s.contents)[Sequence.length (old s.contents) - 1]",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 99;
                               pos_bol = 5153;
                               pos_cnum = 5167
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 101;
                               pos_bol = 5227;
                               pos_cnum = 5304
                             }
                         })])
           | Error (Empty) ->
               if
                 let s_new__037_ =
                   lazy (Model.get (Lazy.force new_state__016_) 0) in
                 let s_old__036_ = lazy (Model.get state__014_ 0) in
                 (try
                    let __t1__038_ =
                      (Lazy.force s_old__036_).contents =
                        Ortac_runtime.Gospelstdlib.Sequence.empty in
                    let __t2__039_ =
                      Ortac_runtime.Gospelstdlib.Sequence.empty =
                        (Lazy.force s_new__037_).contents in
                    __t1__038_ && __t2__039_
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 102;
                                   pos_bol = 5305;
                                   pos_cnum = 5327
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "lwt_dllist_spec.mli";
                                   pos_lnum = 102;
                                   pos_bol = 5305;
                                   pos_cnum = 5371
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                      (Either.left "Empty") "take_r"
                      [("old s.contents = Sequence.empty = s.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 102;
                               pos_bol = 5305;
                               pos_cnum = 5327
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "lwt_dllist_spec.mli";
                               pos_lnum = 102;
                               pos_bol = 5305;
                               pos_cnum = 5371
                             }
                         })])
           | _ -> None)
      | (Take_opt_l, Res ((Option (Int), _), o)) ->
          if
            let s_new__042_ = lazy (Model.get (Lazy.force new_state__016_) 0) in
            let s_old__041_ = lazy (Model.get state__014_ 0) in
            (try
               (Lazy.force s_old__041_).contents =
                 (match o with
                  | None -> Ortac_runtime.Gospelstdlib.Sequence.empty
                  | Some a_5 ->
                      Ortac_runtime.Gospelstdlib.Sequence.cons a_5
                        (Lazy.force s_new__042_).contents)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 112;
                              pos_bol = 6030;
                              pos_cnum = 6044
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 114;
                              pos_bol = 6131;
                              pos_cnum = 6201
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                 (Either.right (Res (Ortac_runtime.dummy, ()))) "take_opt_l"
                 [("old s.contents = match o with\n                                | None -> Sequence.empty\n                                | Some a -> Sequence.cons a s.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 112;
                          pos_bol = 6030;
                          pos_cnum = 6044
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 114;
                          pos_bol = 6131;
                          pos_cnum = 6201
                        }
                    })])
      | (Take_opt_r, Res ((Option (Int), _), o_1)) ->
          if
            let s_new__045_ = lazy (Model.get (Lazy.force new_state__016_) 0) in
            let s_old__044_ = lazy (Model.get state__014_ 0) in
            (try
               (Lazy.force s_old__044_).contents =
                 (match o_1 with
                  | None -> Ortac_runtime.Gospelstdlib.Sequence.empty
                  | Some a_6 ->
                      Ortac_runtime.Gospelstdlib.Sequence.snoc
                        (Lazy.force s_new__045_).contents a_6)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 124;
                              pos_bol = 6869;
                              pos_cnum = 6883
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "lwt_dllist_spec.mli";
                              pos_lnum = 126;
                              pos_bol = 6970;
                              pos_cnum = 7040
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Lwt_dllist_spec" "create ()"
                 (Either.right (Res (Ortac_runtime.dummy, ()))) "take_opt_r"
                 [("old s.contents = match o with\n                                | None -> Sequence.empty\n                                | Some a -> Sequence.snoc s.contents a",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 124;
                          pos_bol = 6869;
                          pos_cnum = 6883
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "lwt_dllist_spec.mli";
                          pos_lnum = 126;
                          pos_bol = 6970;
                          pos_cnum = 7040
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Lwt_dllist_spec STM tests"
        check_init_state ortac_postcond])
